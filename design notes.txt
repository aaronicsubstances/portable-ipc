PortableIPC constraints

-session id is pregenerated by sender.

-add these 2 fields to sequence number:
 - window id: 64-bit. non negative. Ensures that we can use network time servers to detect expirations.
 - timestamp: 64-bit opaque blob. interpret all zeros to mean skip expiration check. use normal timestamp from NTP servers

-in session layer, options are only used in open, open acks and close, and not in data or acks or close all.
-application layer can use options only in open and data.

-session layer options during data exchanges:
 - lastinwindow?
 - disable idle timeout?
 - error code
 - lastOpenRequest
 
About max window size, retry count and timeouts, maximum pdu size
 - only application knows, using his max window size, and algorithms for retry count, ack timeout, idle timeout

Rules for window id changes are:
  - Receiver usually accepts only next ids larger than last received window id.
  - The only exception is that receiver can receive a next of 0, provided  last received id is larger than 0.
  - By so doing receiver can be conservative, and sender can have freedom in varying trend of window ids.

during open
 - if at any time, we have an open request pdu buffer such that, there exists a lastinwindow pdu, and pdus for all prior sequence numbers exist, we are done.
 - also if max window  size is filled, we are done. discard sequence numbers larger than max window size without acknowledging them.
 - until then, receipt of a pdu overwrites existing with same sequence number. 
   - additionally, receipt of lastinwindow pdu ejects any existing one also with lastinwindow option set. and all larger sequence numbers as well.
 - if before any data is received, a sequence number corresponding to any received is seen, just pass back ack response with lastinwindow set.
 - any new window number clears existing buffer
 - presence of last open request in a window ends open phase and begins data exchange phase

receipt processing of open or even data must always be conservative. any alternate session state handler, such as to introduce congestion control, must be done at sender side.
-totally ignores all session layer options except idle timeout.
-always acknowledges received open or data pdus.
-position in window during receipt of data is result of sequence number

during close
-set error code if available.

during send data
-due to conservative nature of receive, send must be prepared to handle acks it is not expecting or not interested in.
-where headers and data are present, send all headers first, then data.
-by default during send data, sender sends all in window, disregarding acks except for final ack. and setting timeout only for final ack. ie go back N.
 -on ack timeout, sender starts again, but this time one by one, ie stop and wait.
-must be prepared to get final ack other than expected, if window size of receiver is smaller. in which case cancel current send, and restart with different in-window indices.

during send open
-validate options per ack pdu message.
-validate received open ack immediately. open acks must echo back option value or empty string to mean rejection.



