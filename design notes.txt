PortableIPC constraints

TODO
-replace error message with error code.
-use autoinc ids to enforce cancellation of timeouts.

-replace sequence number with 3 fields.
 - window id: 64-bit. non negative. Ensures that we can use network time servers to detect expirations.
 - in window index: 32-bit. non negative.
 - timestamp: 64-bit opaque blob. interpret all zeros to mean skip expiration check. use normal timestamp from NTP servers

-in session layer, options are only used in open, open acks and close, and not in data or acks or close all.
-application layer can use options only in open and data.

-session id is pregenerated by sender.

-session layer options during data exchanges:
 - lastinwindow?
 - idle timeout - use default for negative. respect 0. used by receiver, but reset by sender.
 - maximum pdu size - use default for anything less than 512. must be at least 512.
 
About window size, retry count and ack timeout
 - sender only knows, using his default window size, and algorithms for retry count, ack timeout.

during open none of these options is known already. 
 - maximum pdu size doesn't matter here. receiver just has to respond in kind using received size as a cap.
 - receiver uses default for idle timeout.
 - receiver uses maximum open request pdu count to limit sender.
 - if at any time, we have an open request pdu buffer such that, there exists a lastinwindow pdu, and pdus for all prior sequence numbers exist, we are done.
 - until then, receipt of a pdu overwrites existing with same sequence number. 
   - additionally, receipt of lastinwindow pdu ejects any existing one also with lastinwindow option set. and all larger sequence numbers as well.
 - if before any data is received, a sequence number corresponding to any received is seen, just pass back ack response with lastinwindow set.
 - any new window number clears existing buffer

receipt processing of open or even data must always be conservative. any alternate session state handler, such as to introduce congestion control, must be done at sender side.
-totally ignores all session layer options except idle timeout.
-always acknowledges received open or data pdus.
-position in window during receipt of data is result of sequence number modulo window size.

during close
-send back as many error codes as possible.
-if receipt gets lastinwindow for open request, and can't honour options, respond with close.
-if send sends lastinwindow for open request, it should be prepared for close response.

during send data
-due to conservative nature of receive, send must be prepared to handle acks it is not expecting or not interested in.
-where headers and data are present, send all headers first, then data.
-by default during send data, sender sends all in window, disregarding acks except for final ack. and setting timeout only for final ack. ie go back N.
 -on ack timeout, sender starts again, but this time one by one, ie stop and wait.
-must be prepared to get final ack other than expected, if window size of receiver is smaller. in which case cancel current send, and restart with different in-window indices.

during send open
-validate options per ack pdu message.
-gather all open acks and use only first options honoured.
-use min/max endpoint config settings to honour options.



